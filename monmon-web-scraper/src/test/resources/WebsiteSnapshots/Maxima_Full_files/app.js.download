function app(  ){
	this.init();
}

//------------------------------------------------------
app.prototype.addModule = function( moduleName, objectName, params ){

	var ob = {};
	var self = this;

	if( objectName == undefined || objectName == '' || objectName== null )
		objectName = moduleName;	

	self.modules[ objectName ] = new window[ moduleName ]( params );

}


//------------------------------------------------------
app.prototype.init = function( objects ){ 

	var self = this;

	self.scroll_top = $(window).scrollTop();

	self.responsiveBreakes = { 
		xl : 1920,
 	 	l : 1366,
	  	m : 1280,
	  	//s : 1024,
	 	mob_l  : 1024,	  	
 		mob_m  : 670,
 		mob_s  : 440
	};

	self.break_point = self.responsiveBreakes.mob_l;
	self.resizeElementsCallback = false;

	self.modules = [];
	
	self.resizing = false;

	self.detectMobile();
	self.calculateSizes();
	self.scrollEvent();
	self.resizeElements();

	self.resizeEvent();
	
	if(self.mobile)
	{	
		setTimeout( 
			function(){ 
				self.orientationChange();
		}, 300);
	}

	//window.scrollTo(0,0);

	self.initKeyboard();
}

//------------------------------------------------------
app.prototype.getResponsiveBreak = function(){

	var self = this;
	var res = false;

	for (var key in self.responsiveBreakes) {
		if( self.responsiveBreakes[key] >= app_.w_w  )
			res = { res: self.responsiveBreakes[key], name: key };
	}

	return res;

}


//------------------------------------------------------
app.prototype.detectMobile = function(){

	var self = this;
	self.mobile = false;
	self.tablet = false;

	if( device.tablet() )
	{
		self.mobile = true;
		self.tablet = true;
	}	

	if( device.mobile())
		self.mobile = true;

}

//------------------------------------------------------
app.prototype.benchmark_star = function(){

	var self = this;
	self.bn_start = new Date();
}

//------------------------------------------------------
app.prototype.benchmark_end = function(){

	var self = this;
	
	var d2 = new Date();
    var d3 = new Date();
    d3 = (d2 - self.bn_start);

    return d3;

}


//------------------------------------------------------
app.prototype.calculateSizes = function(){

	var self = this;

	self.w_h = $(window).height();
	self.w_w = $(window).width();

	self.calculateSizesDocumentSize();
	self.portrait = device.landscape();


}	

//------------------------------------------------------
app.prototype.calculateSizesDocumentSize = function(){

	var self = this;
	self.d_h = $(document).height(); 

}


//-------------------------------------------------------------------
app.prototype.scrollEvent = function() 
{
	var self = this;

	$(window).scroll(function(e){ 
		self.scroll_top = $(window).scrollTop();
		
		if (typeof pdfTooltip != 'undefined')
			pdfTooltip.tooltipster("close");

		for (var key in self.modules) {
			if (typeof self.modules[key] !== "function") {
				if (typeof self.modules[key].scrollEvent == "function") {
					self.modules[key].scrollEvent( self.scroll_top );
				}
			}
		}
	});

}	

//-------------------------------------------------------------------
app.prototype.disableBlocksScrollEvent = function() 
{
	var self = this;

	for (var key in self.modules) {
		var obj = self.modules[key];
		obj.scrollEventDisabled = true;
	}

}

//------------------------------------------------------
app.prototype.resizeEvent = function()
{
	var self = this;

	var rtime = new Date(1, 1, 2000, 12,00,00);
	var timeout = false;
	var delta = 200;

	$(window).resize(function(){

		self.resizing = true;

		self.resizeElements();

		rtime = new Date();
		if (timeout === false) 
		{
        	timeout = true;
        	setTimeout(resizeend, delta);
        }
	});
	
	function resizeend() 
	{
    	if (new Date() - rtime < delta) 
    	{
        	setTimeout(resizeend, delta);
        } 
        else 
        {
        	timeout = false;
        	self.resizeElements();
        	self.resizeElementsEnd();

        	self.resizing = false;
        }               
    }
};




//------------------------------------------------------
app.prototype.orientationChange = function()
{
	var self = this;
	var supportsOrientationChange = "onorientationchange" in window;

	if( supportsOrientationChange )
	{

		window.addEventListener("orientationchange", function(){
    	   	self.resizeElements();
		}, false);
	}	
	else
	{

		var previousOrientation = window.orientation;
		window.addEventListener("resize", function() {

			if(window.orientation !== previousOrientation){
        		previousOrientation = window.orientation;
	    		// orientation changed, do your magic here
	    		self.resizeElements();
			}

		}, false);
	}

};

//------------------------------------------------------
app.prototype.resizeElements = function()
{
	var self = this;
	self.calculateSizes();

	for (var key in self.modules) {
		if (typeof self.modules[key] !== "function") {
			if (typeof self.modules[key].resizeElements == "function") {
				self.modules[key].resizeElements();
			}
		}
	}	

	if( typeof self.resizeElementsCallback == 'function' )
		self.resizeElementsCallback();
}


//------------------------------------------------------
app.prototype.resizeElementsEnd = function()
{
	var self = this;

	for (var key in self.modules) {
		if (typeof self.modules[key] !== "function") {
			if (typeof self.modules[key].resizeElementsEnd == "function") {
				self.modules[key].resizeElementsEnd();
			}
		}
	}
}

//------------------------------------------------------
app.prototype.setResizeElementsCallback = function( callback )
{
	var self = this;
	self.resizeElementsCallback = callback;
}


//-------------------------------------------------------------------
app.prototype.initKeyboard = function()
{
	var self = this;

	return;

	$(document).keydown(function(e){

		var keyCode = e.keyCode || e.which;
		var keyboard = {left: 37, up: 38, right: 39, down: 40, esc: 27, pageup: 33, pagedown:34, space: 32, i: 73, m: 77 };

		/*
		switch (keyCode) 
		{
			case keyboard.space: 
				//e.preventDefault();
			break;
		}
		*/
	});
}


var app_;
$(document).ready(function(){
	app_ = new app( );
});